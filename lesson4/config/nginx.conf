lua_package_path "/app/?.lua;/app/socket/?.lua;/app/resty/?.lua;;";
lua_shared_dict mocks 10m;

init_by_lua_file "/app/initmockdns.lua";

upstream echo-bali{
    server 0.0.0.1;
    balancer_by_lua_block {
        local b = require "ngx.balancer"
        local mocksDict =ngx.shared.mocks
        local jsontext,err = mocksDict:get('dns')
        local mocks=require 'mocks'
        local dns = mocks.Dns:new()
        if jsontext == nil then
            dns:retrieve()
            ngx.shared.mocks:add('dns',dns:tojson())
        else
            dns=mocks.Dns:fromjson(jsontext)    
        end
        local address=dns:lookup('echo-bali')
        b.set_current_peer(address)
    }
}

upstream echo-fiji {
    server 0.0.0.1;
    balancer_by_lua_block {
        local b = require "ngx.balancer"
        local mocksDict =ngx.shared.mocks
        local jsontext,err = mocksDict:get('dns')
        local mocks=require 'mocks'
        local dns = mocks.Dns:new()
        if jsontext == nil then
            dns:retrieve()
            ngx.shared.mocks:add('dns',dns:tojson())
        else
            dns=mocks.Dns:fromjson(jsontext)    
        end
        local address=dns:lookup('echo-fiji')
        b.set_current_peer(address)
    }   
}

server {
    error_log /spool/logs/nginx-error.log warn;
    access_log /spool/logs/nginx-access.log;
    listen 80;
    location /dns {
        content_by_lua_file '/app/connectusingmockdns.lua';
    } 
    location /bali  {
        proxy_pass http://echo-bali;
    }

    location /fiji  {
        proxy_pass http://echo-fiji;
    }
}
